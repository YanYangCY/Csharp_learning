namespace Chapter_013
{
    /// <summary>
    /// 13.1 数组
    ///     数组实际上是由一个变量名称表示的一组同类型的数据元素。每个元素通过变量名称和方括号中的一个或多个索引进行访问
    ///     13.1.1 定义
    ///         元素：数组的独立数据项称为元素。数组的所有元素必须是相同类型的，或继承自相同的类型
    ///         秩/维度数：数组的维度数可以为任何正数。数组的维度数称为秩
    ///         维度长度：数组的每一个维度有长度，就是这个方向的位置个数
    ///         数组长度：数组的所有维度的元素总数称为数组的长度
    ///     13.1.2 重要细节
    ///         1.数组一旦创建，大小就固定了。C#不支持动态数组
    ///         2.数组的索引是从0开始的。如果维度长度是n,那么索引范围就是0~n-1
    /// 13.2 数组的类型
    ///     C#提供了两种类型的数组：一维数组、多维数组
    ///     1.一维数组：可以认为是单行元素或元素向量
    ///     2.多维数组：由主向量中的位置组成的，每一个位置本身又是一个数组，称为子数组。子数组向量中的位置本身又是一个子数组（嵌套）
    ///         2.1矩形数组（多维数组）：某个维度的所有子数组具有相同长度的多维数组
    ///                     不管多少个维度，总是使用一组方括号
    ///                     int x = myArray[4,6,1]; //三维数组，每个维度的长度都相同.
    ///         2.2交错数组（数组的数组）：每个子数组都是独立数组的多维数组
    ///                                  可以由不同长度的子数组
    /// 13.3 数组是对象
    ///     数组实例是从Sysytem.Array继承类型的对象。
    ///     由于数组从BCL基类派生，继承了BCL基类中的成员，如下：
    ///     Rank：返回数组维度数的属性     Length：返回数组长度的属性    etc
    ///     数组是引用类型；数组的元素既可以是值类型也可以是引用类型
    /// 13.4 一维数组和矩形数组
    ///     可以使用任意多个秩说明符
    ///     不能在数组类型区域中放数组维度长度。秩是数组类型的一部分，但是维度长度不是类型的一部分
    ///     数组声明后，维度数/秩 就是固定了；维度长度只有在数组实例化才会确定
    ///     与C、C++不同，C#的方括号在类型后面，C的方括号是在变量名称后
    ///         C：int number[10];   C++：int[] number;
    /// 13.5 实例化一维数组或矩形数组
    ///     实例化数组可以使用new关键字，示例：int[] arr = new int[4];
    ///                                    int[,,] mcArr = new int[3,6,2];
    /// 13.6 访问数组元素
    ///     在数组中使用整型值作为索引来访问数组元素
    ///     每个维度的索引从0开始
    /// 13.7 初始化数组
    ///     数组被创建后，每一个元素自动初始化为类型的默认值
    ///     整型：0    浮点型：0.0     布尔型：false   引用类型：null
    ///     13.7.1 显式初始化一维数组
    ///         初始值必须用逗号隔开，并封闭在一组大括号内
    ///         不必输入维度长度，编译器可以通过初始化值的个数来推断长度
    ///         int[] intArr = new int[]{10,20,30,40}；
    ///     13.7.2 显式初始化矩形数组
    ///         每一个初始值向量必须封闭在大括号内
    ///         每一个维度也必须嵌套并封闭在大括号内
    ///         除了初始值，每一个维度的初始化列表和组成部分也必须使用逗号分隔
    ///         int[,] intArr = new int[,]{{10,1},{2,10},{11,9}};
    ///     13.7.4 快捷语法
    ///         使用声明数组初始化创建时，可以省略语法的数组创建表达式部分
    ///         int[] arr = new int[3]{10,20,30};
    ///         int[] arr =           {10,20,30};   // 以上两种写法是等价的
    ///     13.7.5 隐式类型数组
    ///         可以使用Var关键字声明，等编译器根据初始化语句的类型推断数组类型
    ///     13.7.6 综合内容
    /// 
    /// 
    /// </summary>
    public class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("######多维数组测试###################");
            int firstElement = rectangularArray[2,0];   //访问元素
            Console.WriteLine("矩形数组测试：{0}",firstElement);
            int firstElementInJagged = jaggedArray[0][0]; // 输出 1
            int thirdElementInSecondRow = jaggedArray[1][2]; // 输出 5
            Console.WriteLine("交错数组测试：{0}，{1}",firstElementInJagged,thirdElementInSecondRow);
            Console.WriteLine("####################################");
            
        }
        //矩形数组
        static int[,] rectangularArray = new int[3, 2]
        {
            {1, 2},
            {3, 4},
            {5, 6}
        };
        //交错数组
        static int[][] jaggedArray = new int[3][]
        {
            new int[2] {1, 2},
            new int[3] {3, 4, 5},
            new int[1] {6}
        };
    }
}

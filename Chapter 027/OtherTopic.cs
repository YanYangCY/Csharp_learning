using System;

namespace Chapter_027
{
    /// <summary>
    /// 27.2 字符串
    ///     C#的预定义的string类型代表了.NET的System.String类
    ///     字符串是Unicode字符数组
    ///     字符串是不可变的--他们不能被修改；每一次方法的更改都是返回新的副本
    ///     String类型的有用成员：
    ///     -------------------------------------------------------------------------------
    ///        成员           类型              意义
    ///     -------------------------------------------------------------------------------
    ///       Length          属性        返回字符串的长度
    ///       Concat        静态方法      返回连接参数字符串后的字符串
    ///       Contrains       方法        返回指示参数是否是对象字符串的子字符串的bool值
    ///       Format    Insert      Remove      Replace     Split       Substring
    ///       ToLower   ToUpper     ......
    ///     -------------------------------------------------------------------------------
    /// 27.3 StringBuilder类
    ///     可以帮助动态、有效的产生字符串，并且避免创建许多副本。
    ///         StringBuilder类是BCL的成员，位于System.Text命名空间中
    ///         StringBuilder对象是Unicode字符的可变数组
    /// 27.4 把字符串解析为数据值
    ///     字符串是Unicode字符的数组。解析可以让我们接受表示值的字符串，并且把他转换为实际的类型值。（如果字符串无法解析会抛出异常）
    ///     所有预定义的简单类型都有一个叫作Parse的静态方法，因为是静态的，所以需要通过目标类型名来调用。
    ///     衍生版本-TryParse如果解析失败不会抛出异常
    /// 27.5 关于可空类型的更多内容
    ///     int? myNInt = 28; // 可空类型的名字包含后缀
    ///     空接合运算符  ??   判断可空类型的变量为null时返回一个值给表达式
    ///     空条件运算符  ?.   检查变量是否为空，如果为空，运算符返回空；如果不为空，那么访问成员
    /// 
    /// 
    /// </summary>
    public class OtherTopic
    {
        public static void Main(string[] args)
        {
            // 把字符串解析为数据值
            double d1 = double.Parse("25.873");
        }
    }
}
using System;
using System.Threading.Tasks;
using SuperLib;

namespace Chapter_022
{
    /// <summary>
    /// 命名空间和程序集
    ///     命名空间就是给类型(类、接口、结构体...)起的“逻辑文件夹”的名字，用来避免重名，方便分类和引用。
    ///     程序集是.NET的“逻辑部署单元”，包含元数据+IL+资源
    /// 22.1 引用其他程序集
    ///     如果想在项目中使用来自其他程序集的类或类型，这些程序集称为 类库 ，这些程序集文件的名称通常以.dll扩展名结尾。
    ///     ※自己创建一个类库:
    ///         包含可以被其他程序集使用的类和类型
    ///         1.添加新项目创建类库
    ///         2.写入函数，右键项目生成 -> 会在对应项目的bin目录下生成dll文件
    ///         3.调用：可以将类库项目添加到项目中，实时编译；也可以直接将dll文件添加到项目中
    /// 22.2 命名空间
    ///     如果有两个类库SuperLib、UltraLib里面的类名称冲突了，可以在类名称前面加上对应的命名空间名称。
    ///     命名指南：以公司名称开头、在公司名后面跟着技术名称、不要与类或类型名相同
    ///     命名空间内的类型称为命名空间的成员
    ///     在命名空间内，每个类型名必须有别于所有其他类型
    ///     ※命名空间跨文件伸展：不同的源文件中，有相同的命名空间，可以跨文件编译
    ///     嵌套命名空间：文本嵌套、分离的声明
    /// 22.3 using指令
    ///     using命名空间指令、using别名指令
    ///     别名指令：可以给命名空间、命名空间内的一个类型 起一个别名
    ///         例:   using Syst = System;
    ///               using SC   = System.Console;
    ///     using static 指令：using static System.Math; 通过该指令，System.Math类中的所有静态成员都可以在代码中使用而不需要任意前缀
    /// 22.4 程序集的结构
    ///     1.程序集的清单：
    ///         程序集标识符：简单名称、版本号、文化信息、公钥
    ///         组成程序集的文件列表
    ///         一个指示程序集中内容在哪里的地图
    ///         关于引用的其他程序集的信息
    ///     2.类型元数据：该程序集中所有类型的元数据信息
    ///     3.CIL代码：公共中间代码
    ///     4.资源：可选资源，可以包含图形或语言资源
    /// 22.6 强命名程序集
    /// 
    /// 22.8 共享程序集和GAC
    /// 
    /// 
    /// </summary>
    public class NamespaceAndAssembly
    {
        public static void Main(string[] args)
        {
            // 实例化SuperLib空间内的SquareWidget类
            SquareWidget sq = new SquareWidget();
            sq.SideLength = 5.0;
            Console.WriteLine(sq.Area);
        }
    }
    
}